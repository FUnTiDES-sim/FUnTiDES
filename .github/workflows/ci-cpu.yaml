name: CI-CPU

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:      
  pull_request:
    branches:
      - main

  push:
    branches:
      - '**' # TODO REMOVE BEFORE MERGE

  workflow_dispatch: # Allow to start this workflow manually

jobs:

  init_summary:
    runs-on: ubuntu-latest

    outputs:
      summary_path: ${{ steps.summary_path_id.outputs.summary_path }}
    steps:
    - id: summary_path_id
      run: |
        TMP_PATH=$(mktemp /tmp/summary_XXXXXX.txt)
        echo "summary_path=${TMP_PATH}" >> $GITHUB_OUTPUT

    - name: Debug summary_path
      run: echo "Summary path is ${{ steps.summary_path_id.outputs.summary_path }}"


  build:
    needs: init_summary
    runs-on: ubuntu-latest

    strategy:
      matrix:
        discretization: [fd, sem]
        pywrap: [pywrap-on, pywrap-off]
        programming_model: [vector, kokkos]

      max-parallel: 5
      
    continue-on-error: true # We want to run other builds even if some build fails

    steps:

    - name: Get token from Github App
      uses: actions/create-github-app-token@v1
      id: app_token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PRIVATE_KEY }}
        # owner is required, otherwise the creds will fail the checkout step
        owner: ${{ github.repository_owner }}

    - name: Checkout
      id: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ steps.app_token.outputs.token }}

    - name: Set up Python
      if: matrix.pywrap == 'pywrap-on'
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install pybind11

    - name: Build
      id: build
      run: |
          export DISCRETIZATION=${{ matrix.discretization }}
          export PYWRAP=${{ matrix.pywrap }}
          export PROGRAMMING_MODEL=${{ matrix.programming_model }}

          #### Cmake flags
          #### Extend CMAKE_FLAGS based on selections
          export CMAKE_FLAGS=""

          # Discretization variant
          if [[ "$DISCRETIZATION" == "fd" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DCOMPILE_FD=ON -DCOMPILE_SEM=OFF"
          elif [[ "$DISCRETIZATION" == "sem" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DCOMPILE_SEM=ON -DCOMPILE_FD=OFF"
          fi

          # Python bindings
          if [[ "$PYWRAP" == "pywrap-on" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DENABLE_PYWRAP=ON"
            export PYWRAP_SUMMARY=on
          else
            CMAKE_FLAGS="$CMAKE_FLAGS -DENABLE_PYWRAP=OFF"
            export PYWRAP_SUMMARY=off
          fi

          # Programming model
          if [[ "$PROGRAMMING_MODEL" == "vector" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DUSE_VECTOR=ON"
          elif [[ "$PROGRAMMING_MODEL" == "kokkos" ]]; then
            CMAKE_FLAGS="$CMAKE_FLAGS -DUSE_KOKKOS=ON"
          fi

          ####
          #### Configure & Build

          # Activate python venv if pywrap is on
          if [[ "$PYWRAP" == "pywrap-on" ]]; then
            source .venv/bin/activate
          fi

          # Build
          mkdir build
          cd build
          echo "cmake .. ${CMAKE_FLAGS}" # For debug
          cmake .. ${CMAKE_FLAGS}
          make -j 6

    - name: Write summary line
      if: always()
      run: |
        STATUS="${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}"
        echo " | \`${{ matrix.discretization }}\` | \`${{ matrix.programming_model }}\` | ${PYWRAP_SUMMARY} | ${STATUS} |" >> ${{ needs.init_summary.outputs.summary_path }}

  summary:
    needs: [init_summary, build]
    runs-on: ubuntu-latest
    steps:
    - name: Create summary table
      run: |
        echo "## Matrix build summary" > full-summary.md
        echo "" >> full-summary.md
        echo "| Discretization | Programming model | PyWrap | Status |" >> full-summary.md
        echo "|----------------|-------------------|--------|--------|" >> full-summary.md
        cat ${{ needs.init_summary.outputs.summary_path }} >> full-summary.md

    - name: Write to $GITHUB_STEP_SUMMARY
      run: |
        cat full-summary.md >> $GITHUB_STEP_SUMMARY
        rm -f ${{ needs.init_summary.outputs.summary_path }}

        # if at least one failed, need to exit 1
        if grep -q "❌ Failed" full-summary.md; then
          rm -f full-summary.md
          exit 1
        fi
        
        rm -f full-summary.md